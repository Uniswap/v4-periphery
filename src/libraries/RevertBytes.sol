// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

library RevertBytes {
    using RevertBytes for bytes;

    /// @notice error thrown when invalid revert bytes are thrown by the quote
    error UnexpectedRevertBytes(bytes revertData);

    /// @dev min valid reason is 2-words long (64 bytes)
    /// @dev amountUnspecified and sqrtPriceX96After
    uint256 internal constant MINIMUM_VALID_RESPONSE_LENGTH = 64;

    /// @notice reverts, where the revert data is the provided bytes
    /// @dev called when quoting, at the end of simulating a swap, to revert with the swap information as the revert reason
    function revertWith(bytes memory revertData) internal pure {
        // mload(revertData): the length of the revert data
        // add(revertData, 0x20): a pointer to the start of the revert data
        assembly ("memory-safe") {
            revert(add(revertData, 0x20), mload(revertData))
        }
    }

    /// @notice check revert reasons are of the expected length; otherwise revert with different message
    /// @dev called after a swap simulation reverts, to check if the revert was valid encoded quote information, or an internal issue
    function validateRevertReason(bytes memory reason) internal pure {
        if (reason.length < MINIMUM_VALID_RESPONSE_LENGTH) {
            revert UnexpectedRevertBytes(reason);
        }
    }

    /// @notice validates a received revert reason from a single-hop swap.
    /// Then, if valid, decodes it into the information generated by a quote
    function parseReturnDataSingle(bytes memory reason) internal pure returns (uint256, uint160) {
        reason.validateRevertReason();
        return abi.decode(reason, (uint256, uint160));
    }

    /// @notice validates a received revert reason from a multi-hop swap.
    /// Then, if valid, decodes it into the information generated by a quote
    function parseReturnData(bytes memory reason) internal pure returns (uint256, uint160[] memory) {
        reason.validateRevertReason();
        return abi.decode(reason, (uint256, uint160[]));
    }
}
